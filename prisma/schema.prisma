generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model application_wallets {
  id      Int      @id @default(autoincrement())
  network String   @unique @db.VarChar(50)
  balance Decimal? @default(0.0) @db.Decimal(20, 8)
}

model deposits {
  id             Int       @id @default(autoincrement())
  user_id        Int?
  amount         Decimal   @db.Decimal(20, 2)
  transaction_id String    @unique @db.VarChar(255)
  status         String?   @default("Pending") @db.VarChar(20)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  users          users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model members {
  id                             Int       @id @default(autoincrement())
  user_id                        Int?
  member_id                      Int?
  created_at                     DateTime? @default(now()) @db.Timestamp(6)
  users_members_member_idTousers users?    @relation("members_member_idTousers", fields: [member_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_members_user_idTousers   users?    @relation("members_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model packages {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(100)
  price        Decimal   @db.Decimal(20, 2)
  daily_income Decimal   @db.Decimal(20, 2)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  users        users[]
}

model users {
  id                               Int           @id @default(autoincrement())
  username                         String        @unique @db.VarChar(100)
  email                            String        @unique @db.VarChar(255)
  phonenumber                      String?       @unique @db.VarChar(20)
  password                         String        @db.VarChar(255)
  referral                         Int?
  balance                          Decimal?      @default(0.0) @db.Decimal(20, 2)
  last_activity                    DateTime?     @default(now()) @db.Timestamp(6)
  status                           String?       @default("Active") @db.VarChar(20)
  membership                       Int?
  created_at                       DateTime?     @default(now()) @db.Timestamp(6)
  deposits                         deposits[]
  members_members_member_idTousers members[]     @relation("members_member_idTousers")
  members_members_user_idTousers   members[]     @relation("members_user_idTousers")
  packages                         packages?     @relation(fields: [membership], references: [id], onUpdate: NoAction)
  users                            users?        @relation("usersTousers", fields: [referral], references: [id], onUpdate: NoAction)
  other_users                      users[]       @relation("usersTousers")
  wallets                          wallets[]
  withdrawals                      withdrawals[]
}

model wallets {
  id          Int           @id @default(autoincrement())
  user_id     Int?
  network     String        @db.VarChar(50)
  public_key  String        @unique @db.VarChar(255)
  private_key String        @db.VarChar(255)
  balance     Decimal?      @default(0.0) @db.Decimal(20, 8)
  created_at  DateTime?     @default(now()) @db.Timestamp(6)
  users       users?        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  withdrawals withdrawals[]
}

model withdrawals {
  id              Int       @id @default(autoincrement())
  user_id         Int?
  user_wallet_id  Int?
  withdraw_wallet String    @db.VarChar(255)
  amount          Decimal   @db.Decimal(20, 2)
  network         String    @db.VarChar(50)
  status          String?   @default("Pending") @db.VarChar(20)
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  updated_at      DateTime? @default(now()) @db.Timestamp(6)
  users           users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  wallets         wallets?  @relation(fields: [user_wallet_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
